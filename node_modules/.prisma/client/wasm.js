
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.4.1
 * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
 */
Prisma.prismaVersion = {
  client: "6.4.1",
  engine: "a9055b89e58b4b5bfb59600785423b1db3d0e75d"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  avatar: 'avatar',
  school: 'school',
  grade: 'grade',
  location: 'location',
  bio: 'bio',
  interests: 'interests',
  skills: 'skills',
  availability: 'availability',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  status: 'status',
  progress: 'progress',
  visibility: 'visibility',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownerId: 'ownerId',
  guildId: 'guildId',
  timestampProof: 'timestampProof'
};

exports.Prisma.ProjectMemberScalarFieldEnum = {
  id: 'id',
  role: 'role',
  joinedAt: 'joinedAt',
  userId: 'userId',
  projectId: 'projectId'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  projectId: 'projectId'
};

exports.Prisma.DocumentEditScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  documentId: 'documentId',
  userId: 'userId'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  title: 'title',
  dueDate: 'dueDate',
  completed: 'completed',
  projectId: 'projectId'
};

exports.Prisma.GuildScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logo: 'logo',
  description: 'description',
  categories: 'categories',
  ranking: 'ranking',
  score: 'score',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ownerId: 'ownerId'
};

exports.Prisma.GuildMemberScalarFieldEnum = {
  id: 'id',
  role: 'role',
  joinedAt: 'joinedAt',
  userId: 'userId',
  guildId: 'guildId'
};

exports.Prisma.MentorProfileScalarFieldEnum = {
  id: 'id',
  title: 'title',
  institution: 'institution',
  specialties: 'specialties',
  bio: 'bio',
  availability: 'availability',
  rating: 'rating',
  userId: 'userId'
};

exports.Prisma.MentorshipRelationScalarFieldEnum = {
  id: 'id',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  studentId: 'studentId',
  mentorId: 'mentorId',
  mentorProfileId: 'mentorProfileId'
};

exports.Prisma.MentorReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  comment: 'comment',
  date: 'date',
  userId: 'userId',
  mentorProfileId: 'mentorProfileId'
};

exports.Prisma.ArticleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  abstract: 'abstract',
  content: 'content',
  tags: 'tags',
  status: 'status',
  likes: 'likes',
  publishedDate: 'publishedDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  timestampProof: 'timestampProof',
  authorId: 'authorId'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  userId: 'userId',
  articleId: 'articleId'
};

exports.Prisma.LikeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  userId: 'userId',
  articleId: 'articleId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  read: 'read',
  createdAt: 'createdAt',
  senderId: 'senderId',
  receiverId: 'receiverId',
  conversationId: 'conversationId'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationParticipantScalarFieldEnum = {
  id: 'id',
  joinedAt: 'joinedAt',
  lastRead: 'lastRead',
  userId: 'userId',
  conversationId: 'conversationId'
};

exports.Prisma.SwipeActionScalarFieldEnum = {
  id: 'id',
  action: 'action',
  createdAt: 'createdAt',
  swiperId: 'swiperId',
  targetId: 'targetId'
};

exports.Prisma.MatchScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  conversationId: 'conversationId'
};

exports.Prisma.CollaborationRequestScalarFieldEnum = {
  id: 'id',
  message: 'message',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  senderId: 'senderId',
  receiverId: 'receiverId',
  projectId: 'projectId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  content: 'content',
  read: 'read',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.SearchQueryScalarFieldEnum = {
  id: 'id',
  query: 'query',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  PLANNING: 'PLANNING',
  IN_PROGRESS: 'IN_PROGRESS',
  DATA_COLLECTION: 'DATA_COLLECTION',
  ANALYSIS: 'ANALYSIS',
  WRITING: 'WRITING',
  COMPLETED: 'COMPLETED'
};

exports.Visibility = exports.$Enums.Visibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  GUILD_ONLY: 'GUILD_ONLY'
};

exports.MemberRole = exports.$Enums.MemberRole = {
  LEADER: 'LEADER',
  CONTRIBUTOR: 'CONTRIBUTOR',
  ADVISOR: 'ADVISOR'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  ABSTRACT: 'ABSTRACT',
  PROPOSAL: 'PROPOSAL',
  DATA: 'DATA',
  ANALYSIS: 'ANALYSIS',
  PAPER: 'PAPER',
  PRESENTATION: 'PRESENTATION',
  CODE_NOTEBOOK: 'CODE_NOTEBOOK'
};

exports.GuildRole = exports.$Enums.GuildRole = {
  LEADER: 'LEADER',
  MODERATOR: 'MODERATOR',
  MEMBER: 'MEMBER'
};

exports.MentorshipStatus = exports.$Enums.MentorshipStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED'
};

exports.ArticleStatus = exports.$Enums.ArticleStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  FEATURED: 'FEATURED'
};

exports.ConversationType = exports.$Enums.ConversationType = {
  DIRECT: 'DIRECT',
  GROUP: 'GROUP'
};

exports.SwipeType = exports.$Enums.SwipeType = {
  RIGHT: 'RIGHT',
  LEFT: 'LEFT'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  MESSAGE: 'MESSAGE',
  MATCH: 'MATCH',
  REQUEST: 'REQUEST',
  PROJECT_UPDATE: 'PROJECT_UPDATE',
  MENTOR_REQUEST: 'MENTOR_REQUEST',
  SYSTEM: 'SYSTEM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Project: 'Project',
  ProjectMember: 'ProjectMember',
  Document: 'Document',
  DocumentEdit: 'DocumentEdit',
  Milestone: 'Milestone',
  Guild: 'Guild',
  GuildMember: 'GuildMember',
  MentorProfile: 'MentorProfile',
  MentorshipRelation: 'MentorshipRelation',
  MentorReview: 'MentorReview',
  Article: 'Article',
  Comment: 'Comment',
  Like: 'Like',
  Message: 'Message',
  Conversation: 'Conversation',
  ConversationParticipant: 'ConversationParticipant',
  SwipeAction: 'SwipeAction',
  Match: 'Match',
  CollaborationRequest: 'CollaborationRequest',
  Notification: 'Notification',
  SearchQuery: 'SearchQuery'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
